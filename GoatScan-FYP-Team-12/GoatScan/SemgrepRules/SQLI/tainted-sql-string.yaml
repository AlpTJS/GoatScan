rules:
- id: tainted-sql-string
  languages:
  - php
  severity: ERROR
  message: User data flows into this manually-constructed SQL string. User data can be safely inserted
    into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed
    SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate
    data from the database. Instead, use prepared statements (`$mysqli->prepare("INSERT INTO test(id,
    label) VALUES (?, ?)");`) or a safe library.
  metadata:
    cwe:
    - "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    category: security
    technology:
    - php
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
  mode: taint
  pattern-sanitizers:
      - pattern-either:
          - pattern: mysqli_real_escape_string(...)
          - pattern: real_escape_string(...)
          - pattern: $MYSQLI->real_escape_string(...)
          - pattern: $wpdb->prepare(...)
          - pattern: esc_attr(...)
          - pattern: absint(...)
          - pattern: esc_sql(...)

  pattern-sources:
      #User-Input
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES   
      - pattern: $_COOKIE
      - pattern: $_REQUEST    #Contain $_GET, $_COOKIE arrays
      - pattern: get_headers(...)
      - pattern: getallheaders(...)
      - pattern: get_browser(...)
      - pattern: gethostbyaddr(...)
      - pattern: $_SERVER   # Contain client's req (headers)

      #Objet Oriented User-Input
      # - pattern: $X->get(...)
      # - pattern: $X::get(...)
      # - pattern: $X->path(...) 
      # - pattern: $X::path(...)
      # - pattern: $X->url(...)
      # - pattern: $X::url(...)
      # - pattern: $X->fullUrl(...)
      # - pattern: $X::fullUrl(...)
      # - pattern: $X->method(...)
      # - pattern: $X::method(...)
      # - pattern: $X->header(...)
      # - pattern: $X::header(...)
      # - pattern: $X->bearerToken(...)
      # - pattern: $X::bearerToken(...)
      # - pattern: $X->ip(...)
      # - pattern: $X::ip(...)
      # - pattern: $X-> all(...)
      # - pattern: $X::all(...)
      # - pattern: $X->collect(...)
      # - pattern: $X::collect(...)
      # - pattern: $X->input(...)
      # - pattern: $X::input(...)
      # - pattern: $X->query(...)
      # - pattern: $X::query(...)
      # - pattern: $X->method(...)
      # - pattern: $X::method(...)

  pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern: |
                  sprintf($SQLSTR, ...)
              - metavariable-regex:
                  metavariable: $SQLSTR
                  regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
          - patterns:
              - pattern: |
                  "...{$EXPR}..."
              - pattern-regex: >
                  .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
          - patterns:
              - pattern: |
                  "...$EXPR..."
              - pattern-regex: >
                  .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
          - patterns:
              - pattern: |
                  "...".$EXPR
              - pattern-regex: >
                  .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*


    #Pattern Explain
    # // Pattern 1: Using sprintf with a SQL query string
    # $SQLSTR = "SELECT * FROM users WHERE username=$userInput";
    # $query1 = sprintf($SQLSTR, $userInput);

    # // Pattern 2: Using variable within double-quoted string
    # $query2 = "SELECT * FROM users WHERE username='{$userInput}'";

    # // Pattern 3: Using variable within double-quoted string
    # $query3 = "SELECT * FROM users WHERE username='$userInput'";

    # // Pattern 4: Concatenating variable with a string
    # $query4 = "SELECT * FROM users WHERE username='" . $userInput;